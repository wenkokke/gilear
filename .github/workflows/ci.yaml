name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  merge_group:

defaults:
  run:
    shell: "sh"

jobs:
  #############################################################################
  # Build
  #############################################################################

  build:
    name: "Build on ${{ matrix.os.name }}"
    runs-on: "${{ matrix.os.runner }}"

    strategy:
      matrix:
        os:
          - name: "Linux"
            runner: "ubuntu-latest"
          - name: "macOS"
            runner: "macOS-latest"
          - name: "Windows"
            runner: "windows-latest"
        haskell:
          - ghc:
              version: "" # use version from dev-dependencies
            cabal:
              version: "" # use version from dev-dependencies
              project-file: "cabal.project.debug"

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      # The dev-dependencies file lists the versions of all system dependencies
      # required for development. It is formatted in such a way that it is easy
      # to use from GitHub Actions. This step outputs the versions to make them
      # available to all following steps under "steps.dev-dependencies.outputs"
      - name: 🗄️ Read dev-dependencies
        run: cat "./scripts/dev-dependencies.txt" >> "$GITHUB_OUTPUT"
        id: dev-dependencies

      - name: 🛠️ Install Graphviz
        uses: ts-graphviz/setup-graphviz@v2

      - name: 🛠️ Install Haskell
        uses: haskell-actions/setup@v2
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.haskell.ghc.version || steps.dev-dependencies.outputs.ghc }}
          cabal-version: ${{ matrix.haskell.cabal.version || steps.dev-dependencies.outputs.cabal }}

      - name: 🛠️ Configure
        run: |
          cabal configure --project-file=${{ matrix.haskell.cabal.project-file }}
          cabal build all --project-file=${{ matrix.haskell.cabal.project-file }} --dry-run

      - name: 💾 Restore Cabal dependencies
        uses: actions/cache/restore@v4
        if: ${{ !env.ACT }}
        id: cache-haskell
        env:
          key: ${{ matrix.os.name }}-ghc-${{ steps.setup-haskell.outputs.ghc-version }}-cabal-${{ steps.setup-haskell.outputs.cabal-version }}
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('dist-newstyle/cache/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: 🛠️ Install Cabal dependencies
        if: ${{ env.ACT || steps.cache-haskell.outputs.cache-hit != 'true' }}
        run: cabal build all --only-dependencies

      - name: 💾 Save Cabal dependencies
        uses: actions/cache/save@v4
        if: ${{ !env.ACT && steps.cache-haskell.outputs.cache-hit != 'true' }}
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: ${{ steps.cache-haskell.outputs.cache-primary-key }}

      - name: 🏗️ Build
        run: cabal build all --project-file=${{ matrix.haskell.cabal.project-file }}

      - name: 🧪 Test
        run: cabal test all --project-file=${{ matrix.haskell.cabal.project-file }}

  #############################################################################
  # Lint with actionlint
  #############################################################################

  lint-actionlint:
    name: "Lint with actionlint"
    runs-on: "ubuntu-latest"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🗄️ Read dev-dependencies
        run: cat "./scripts/dev-dependencies.txt" >> "$GITHUB_OUTPUT"
        id: dev-dependencies

      - name: "Setup actionlint"
        uses: ./.github/actions/setup-actionlint
        with:
          actionlint-version: ${{ steps.dev-dependencies.outputs.actionlint }}
        id: setup-actionlint

      - name: 🎗️ Lint with actionlint
        run: ./scripts/lint-actionlint.sh
        env:
          ACTIONLINT: ${{ steps.setup-actionlint.outputs.actionlint-bin }}

  #############################################################################
  # Lint with cabal
  #############################################################################

  lint-cabal:
    name: "Lint with Cabal"
    runs-on: "ubuntu-latest"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🗄️ Read dev-dependencies
        run: cat "./scripts/dev-dependencies.txt" >> "$GITHUB_OUTPUT"
        id: dev-dependencies

      - name: 🛠️ Install Haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ steps.dev-dependencies.outputs.ghc }}
          cabal-version: ${{ steps.dev-dependencies.outputs.cabal }}
        id: setup-haskell

      - name: 🎗️ Lint with Cabal
        run: ./scripts/lint-cabal.sh

  #############################################################################
  # Lint with HLint
  #############################################################################

  lint-hlint:
    name: "Lint with HLint"
    runs-on: "ubuntu-latest"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🗄️ Read dev-dependencies
        run: cat "./scripts/dev-dependencies.txt" >> "$GITHUB_OUTPUT"
        id: dev-dependencies

      - name: 🛠️ Install HLint
        uses: haskell-actions/hlint-setup@v2
        with:
          version: ${{ steps.dev-dependencies.outputs.hlint }}
        id: setup-hlint

      - name: 🎗️ Lint with HLint
        run: ./scripts/lint-hlint.sh
        env:
          HLINT: ${{ steps.setup-hlint.outputs.hlint-bin }}

  #############################################################################
  # Lint with Prettier
  #############################################################################

  lint-prettier:
    name: "Lint with Prettier"
    runs-on: "ubuntu-latest"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🛠️ Install Prettier
        run: npm i

      - name: 🎗️ Lint with Prettier
        run: ./scripts/lint-prettier.sh

  #############################################################################
  # Lint with ShellCheck
  #############################################################################

  lint-shellcheck:
    name: "Lint with ShellCheck"
    runs-on: "ubuntu-latest"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🗄️ Read dev-dependencies
        run: cat "./scripts/dev-dependencies.txt" >> "$GITHUB_OUTPUT"
        id: dev-dependencies

      - name: 🛠️ Install ShellCheck
        uses: ./.github/actions/setup-shellcheck
        with:
          shellcheck-version: ${{ steps.dev-dependencies.outputs.shellcheck }}
        id: setup-shellcheck

      - name: 🎗️ Lint with ShellCheck
        run: ./scripts/lint-shellcheck.sh
        env:
          SHELLCHECK: ${{ steps.setup-shellcheck.outputs.shellcheck-bin }}
